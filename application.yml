server:
  port: ${SERVER_PORT}

logging:
  pattern:
    # DESC: Custom logging pattern (for open telemetry)
    level: "%5p [${SPRING_APPLICATION_NAME},%X{trace_id},%X{span_id}]"

spring:
  application:
    name: ${SPRING_APPLICATION_NAME}

  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}?currentSchema=${DB_SCHEMA}&binaryTransfer=true&reWriteBatchedInserts=true
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      minimum-idle: 5
      maximum-pool-size: 10
      keepalive-time: 60000
      idle-timeout: 120000
      leak-detection-threshold: 150000
      max-lifetime: 180000
      connection-timeout: 3000
      validation-timeout: 2500
      register-mbeans: true

  jpa:
    # Disables open-in-view sessions which forces the persistence context to stay open so that the view layer can trigger proxy initialization. This will keep the DB connection open for a long time which would have a bad effect on performance.
    open-in-view: false
    show-sql: true
    database-platform: org.hibernate.dialect.Database.POSTGRESQL
    # DESC: Auto-generate table from entities
    # DESC: This config does the magic of automatically creating tables for you based on the JPA entities you have created
    # generate-ddl: true
    # DESC: So init-data.sql will work
    defer-datasource-initialization: true
    hibernate:
      # DESC: Update schema if necessary (e.g. add new columns, etc.)
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true

  sql:
    init:
      platform: postgres
      schema-locations: classpath:scripts/init-schema.sql
      mode: always

  # DESC: For spring cloud bus and refreshing microservices' configs with the config-server
  # NOTE: rabbitmq is used to relay info to microservices that configs at the config-server have been updated
  # rabbitmq:
  #   host: ${RABBITMQ_HOST}
  #   port: ${RABBITMQ_PORT}
  #   username: ${RABBITMQ_USERNAME}
  #   password: ${RABBITMQ_PASSWORD}

  # NOTE: Uncomment when using k8s service discovery
  # NOTE: Comment out when not using k8s service discovery
  cloud:
    kubernetes:
      discovery:
        # DESC: Allow the services to discovery k8s service discovery in other namespaces besides the "default" namespace
        all-namespaces: true


# NOTE: Uncomment when using eureka (and not k8s service discovery)
# NOTE: Comment out eureka when using k8s service discovery
# eureka:
#   instance:
#     # DESC: Setting 'true' tells this service to register with eureka using its IP address instead of its hostname as obtained by the OS/DNS
#     # RECOMMENDED: Setting 'true' to 'prefer-ip-address' is the recommended approach.
#     prefer-ip-address: true

#   # DESC: Enable yourself to query the eureka registry (to find services)
#   # DESC: Register yourself with eureka
#   # DESC: Locate eureka at the specified url
#   client:
#     enabled: true
#     register-with-eureka: true
#     fetch-registry: true
#     service-url:
#       defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}

endpoints:
  shutdown:
    enabled: true

# DESC: Actuator endpoint management
management:
  endpoints:
    # DESC: Expose all web actuator endpoints
    web:
      exposure:
        include: '*'

  endpoint:
    # DESC: Enables the "/actuator/shutdown" endpoint
    shutdown:
      enabled: true

    # DESC: Enable us to probe "/actuator/health/liveness" & "/actuator/health/readiness" endpoints
    health:
      probes:
        enabled: true

  # DESC: Enable "/actuator/health/liveness" & "/actuator/health/readiness" endpoints
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

  # DESC: For enabling the "/actuator/info" endpoint
  info:
    env:
      enabled: true

  # DESC: Tells micrometer/prometheus to group all metrics related to the microservice under it's app name
  # NOTE: This will help you identify the metrics of each microservice
  # NOTE: Without this property, you'll have a difficult time identifying which metrics belong to which microservice
  metrics:
    tags:
      application: ${SPRING_APPLICATION_NAME}
